{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/01/02/behat-and-js-go-casperjs","webpackCompilationHash":"efc520c28c8a0ddae613","result":{"data":{"markdownRemark":{"html":"<p>Today while writing tests (shocking, I know), I came across an interesting and unknown (at the time) scenario. For the site, I wanted to test and make sure a certain element was showing up on the page. At the time, I was writing Behat tests to do some functionality and the tests are very simple to write, so I decided to try and create a simple test for my element. <em>Usually</em> this is pretty straightforward:</p>\n<pre><code>Given I am on \"/\" #the homepage\nThen I should see \".ad-block\" element\n</code></pre>\n<p>As you can see above, I am checking to make sure an ad is showing up on the page. <em>However</em> the problem is that the ads do not populate on first page load. They have to send a request to get the ads and populate them. So, this means for Behat, it is <strong>not waiting</strong> for those ads to load! The driver I am using is the Goutte driver, so any chance at creating a FeatureContext is not possible with javascript. Example:</p>\n<pre><code>Given I am on \"/\"\nAnd I wait 4 seconds\n</code></pre>\n<p>That's what I learned today! Luckily, Behat is our <strong>Behavior Driven Development</strong> testing framework, but we also use CasperJS for our testing. In fact, there were already tests written for other ads on the site. The more you know!</p>","frontmatter":{"title":"Behat and JS? Go CasperJS","date":"January 03, 2018","path":"/2018/01/02/behat-and-js-go-casperjs","tags":["Drupal","Coding"],"excerpt":"Today while writing tests (shocking, I know), I came across an interesting and unknown (at the time) scenario. For the site, I wanted to test and make sure a certain element was showing up on the..."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}