{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/06/17/understanding-logical-operators-with-nonboolean-objects","webpackCompilationHash":"8149d6e0ce52c575f120","result":{"data":{"markdownRemark":{"html":"<p>Usually with logical operators in Javascript, one would use boolean checks. For example:</p>\n<pre><code>if (true) {\n    // do this\n} else {\n    // do that\n}\n</code></pre>\n<p>With these operations, we can easily condense the above code:</p>\n<pre><code>var x = 1;\nvar result = (x > 0) ? 'x is greater than 0' : 'x is not greater than 0';\n</code></pre>\n<p>The above situations are fairly straight forward because we have a defined and known value that evalues to <code>true</code> or <code>false</code>. What happens though when you introduce values that could be <code>truthy</code> or <code>fasly</code>?</p>\n<p>The same logic applies, one needs to be more careful though with the output. Remember, that many variables may be considered <code>truthy</code> depending on their type. Objects <em>always evaluate to truthy even if they are empty</em>.</p>\n<pre><code>var sO = {};\nconst opt = sO || { name: 'Default' };\nconst opt2 = !sO || { name: 'Default' };\nconst opt3 = !!sO || { name: 'Default' };\n\n// opt = {}\n// opt2 = {name: 'Default'}\n// opt3 = true\n</code></pre>\n<p>So be careful if you are every checking against non-boolean objects! Make sure you know what the expected boolean output of that object is, it may not be what you think logically.</p>\n<p>Here's a couple examples of things that come out to be truthy:</p>\n<ul>\n<li>Any object (even if it is empty)</li>\n<li>Any array (even if it is empty)</li>\n<li>Strings containing only whitespace (<code>\" \"</code>)</li>\n<li>The string <code>\"false\"</code></li>\n</ul>\n<p>Some falsy objects:</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>''</code> (empty string)</li>\n</ul>","frontmatter":{"title":"Understanding Logical Operators with Non-boolean Objects in Javascript","date":"June 17, 2018","path":"/2018/06/17/understanding-logical-operators-with-nonboolean-objects","tags":["Coding","Technology","Tutorials"],"excerpt":"Usually with logical operators in Javascript, one would use boolean checks. For example:\nif (true) { // do this } else { // do that }\n\nWith these operations, we can..."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}