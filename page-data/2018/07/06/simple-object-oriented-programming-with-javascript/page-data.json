{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/07/06/simple-object-oriented-programming-with-javascript","webpackCompilationHash":"6d8331fd0477da427e91","result":{"data":{"markdownRemark":{"html":"<h2>Constructing</h2>\n<p>With the introduction of ES6, creating classes in Javascript has improved. Even though the new syntax boils down to the same as it was previously done, coming from other OOP languages makes it easier to understand.</p>\n<p>Previously, for creating classes before ES6 we would do it this way:</p>\n<pre><code>function Pet(type, name) {\n    this.type = type;\n    this.name = name;\n}\n\nvar winnie = new Pet('cat', 'Winnie');\n</code></pre>\n<p>Now with ES6, we can use the <code>class</code> syntax:</p>\n<pre><code>class Pet {\n    constructor(type, name) {\n        this.type = type;\n        this.name = name;\n    }\n}\nvar toby = new Pet('dog', 'Toby');\n</code></pre>\n<p>If you want to check and see whether these are the same, you can run a <code>typeof</code> on both of them and you will see that both are of type <code>function</code>!</p>\n<h2>Inheritance</h2>\n<p>Inheritance with Javascript works very similarly to other languages:</p>\n<pre><code>class Pet {\n    constructor(name) {\n        this.name = name;\n    }\n    feed() {\n        console.log(`Feeding ${this.name}`);\n    }\n}\n\nclass Cat extends Pet {\n    constructor(name) {\n        super(name);\n        console.log('Cat created');\n    }\n    meow() {\n        console.log('Meow!');\n    }\n}\n\nclass Dog extends Pet {\n    constructor(name) {\n        super(name);\n        console.log('Dog Created');\n    }\n    bark() {\n        console.log('Woof!');\n    }\n}\n\nconst winnie = new Cat('Winnie'); // Cat created\nconst toby = new Dog('Toby'); // Dog created\n\nwinnie.name // \"Winnie\"\ntoby.name // \"Toby\"\n\nwinnie.meow() // \"Meow!\"\nwinnie.bark() // Uncaught TypeError: winnie.bark is not a function\n\ntoby.bark() // \"Woof!\"\ntoby.meow() // Uncaught TypeError: toby.meow is not a function\n\nwinnie.feed() // Feeding Winnie\ntoby.feed() // Feeding Toby\n</code></pre>\n<p>As you can see above, both <code>Cat</code> and <code>Dog</code> inherit the same <code>feed()</code> method, but they both have their own methods <code>meow()</code> and <code>bark()</code> that only those instances can reference!</p>\n<p>Hope you enjoy this little JS snippet!\n<img src=\"../../../static/content/images/2018/07/tenor-186846798.gif\" alt=\"tenor-186846798\"></p>","frontmatter":{"title":"Simple Object Oriented Programming with Javascript","date":"July 06, 2018","path":"/2018/07/06/simple-object-oriented-programming-with-javascript","tags":["JS","Coding","Tutorials"],"excerpt":"## Constructing\nWith the introduction of ES6, creating classes in Javascript has improved. Even though the new syntax boils down to the same as it was previously done, coming from other OOP languages..."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}