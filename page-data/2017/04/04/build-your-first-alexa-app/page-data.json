{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017/04/04/build-your-first-alexa-app","webpackCompilationHash":"87c6574ca7427ca14818","result":{"data":{"markdownRemark":{"html":"<p>In today's tutorial we are going to set up a very basic Amazon Alexa Skill that uses Python, specifically a package called Flask-Ask. Today's sample data may seem a bit controversial and political - but it is an interesting set of data and one that could be extended much further than what we are doing today.</p>\n<p>The data source we are going to be using is called Drone Stream - <a href=\"http://dronestre.am\">http://dronestre.am</a> - \"real-time and historical data about every reported covert United States drone strike.\" We are going to use this data and Alexa to get updates and facts about Drone Strikes by the United States. Like I said, a bit controversial and political, but hopefully something new is better.</p>\n<p>Here's an example of the structure returned:</p>\n<pre><code>{  \n  \"status\":\"OK\",\n  \"strike\":[  \n    {  \n      \"_id\":\"55c79e711cbee48856a30886\",\n      \"number\":1,\n      \"country\":\"Yemen\",\n      \"date\":\"2002-11-03T00:00:00.000Z\",\n      \"narrative\":\"In the first known US targeted assassination using a drone, a CIA Predator struck a car, killing 6 people.\",\n      \"town\":\"\",\n      \"location\":\"Marib Province\",\n      \"deaths\":\"6\",\n      \"deaths_min\":\"6\",\n      \"deaths_max\":\"6\",\n      \"civilians\":\"0\",\n      \"injuries\":\"\",\n      \"children\":\"\",\n      \"tweet_id\":\"278544689483890688\",\n      \"bureau_id\":\"YEM001\",\n      \"bij_summary_short\":\"In the first known US targeted assassination using a drone, a CIA Predator struck a car killing six al Qaeda suspects.\",\n      \"bij_link\":\"http://www.thebureauinvestigates.com/2012/03/29/yemen-reported-us-covert-actions-since-2001/\",\n      \"target\":\"\",\n      \"lat\":\"15.47467\",\n      \"lon\":\"45.322755\",\n      \"articles\":[  \n      ],\n      \"names\":[  \n        \"Qa'id Salim Sinan al-Harithi, Abu Ahmad al-Hijazi, Salih Hussain Ali al-Nunu, Awsan Ahmad al-Tarihi, Munir Ahmad Abdallah al-Sauda, Adil Nasir al-Sauda'\"\n      ]\n    }\n...\n  ]\n}\n</code></pre>\n<p>Let's get started.</p>\n<h3>Amazon Setup</h3>\n<p>First things first, we need to setup an Amazon Developer account. Head on over to <a href=\"http://developer.amazon.com\">http://developer.amazon.com</a> to register!</p>\n<p><img src=\"../../../static/content/images/2018/06/0_XeDsIe-f3nzD8YSB.png\" alt=\"0_XeDsIe-f3nzD8YSB\"></p>\n<p><img src=\"../../../static/content/images/2018/06/0_JSrqNIDgHZ5GOOmT.png\" alt=\"0_JSrqNIDgHZ5GOOmT\"></p>\n<p>After you've logged in, click on the \"Alexa\" tab in the top menu bar, and then click on \"Alexa Skills Kit\".</p>\n<p><img src=\"../../../static/content/images/2018/06/0_UeBFQwoNmDsHOJ4-.png\" alt=\"0_UeBFQwoNmDsHOJ4-\"></p>\n<p><img src=\"../../../static/content/images/2018/06/0_K19zjGzj0xQ-Uyh8.png\" alt=\"0_K19zjGzj0xQ-Uyh8\"></p>\n<p>In the top right, you should see a button that says \"Add a New Skill\" - click on that and it will bring you to the setup screen for our app!</p>\n<p><img src=\"../../../static/content/images/2018/06/0_3FS1GaOp-djhTCMf.png\" alt=\"0_3FS1GaOp-djhTCMf\"></p>\n<p>Since we are doing an Alexa app based on drone strikes, I'm going to name mine Drone Strike with the \"invocation name\" of drone strike. If you are building your own app just know that the Name is what shows up in the Amazon store and the Invocation Name is what a user has to says to open your app. i.e. \"Alexa, open Drone Strike\"</p>\n<p><img src=\"../../../static/content/images/2018/06/0_xPZ9Jw_SqfPvPwOO.png\" alt=\"0_xPZ9Jw_SqfPvPwOO\"></p>\n<p>Lastly, we need to setup our Interaction Model. Today's tutorial is not about what is an intent or utterances. To get a better understanding of that, here are a couple resources that I've found helpful:</p>\n<ul>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fdeveloper.amazon.com%2Fpublic%2Fsolutions%2Falexa%2Falexa-skills-kit%2Fdocs%2Fdefining-the-voice-interface%23The%2520Intent%2520Schema\">Defining the Voice Interface</a> - by Amazon</li>\n<li><a href=\"https://medium.com/r/?url=http%3A%2F%2Fwww.makermusings.com%2F2015%2F07%2F21%2Fdefining-utterances-for-the-alexa-skills-kit%2F\">Defining Utterances for Alexa Skills Kit</a> - by Maker Musings</li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fdeveloper.amazon.com%2Fpublic%2Fsolutions%2Falexa%2Falexa-skills-kit%2Fdocs%2Fsupported-phrases-to-begin-a-conversation\">Understanding How Users Invoke Custom Skills</a> - by Amazon</li>\n</ul>\n<p>For today's session, here are the intents:</p>\n<pre><code>{\n  \"intents\": [\n    { \"intent\": \"GetRecentDroneStrike\" },\n    { \"intent\": \"AMAZON.HelpIntent\" },\n    { \"intent\": \"AMAZON.StopIntent\" },\n    { \"intent\": \"AMAZON.CancelIntent\" }\n  ]\n}\n</code></pre>\n<p>And here are the sample utterances:</p>\n<pre><code>GetRecentDroneStrike recent drone strike  \nGetRecentDroneStrike what was the most recent strike  \nGetRecentDroneStrike recent strike  \nGetRecentDroneStrike what was the last drone strike  \nGetRecentDroneStrike last drone strike\n</code></pre>\n<p>Go ahead and past them in like you see below.</p>\n<p><img src=\"../../../static/content/images/2018/06/0_-i6SHpZL8cxTO5_Q.png\" alt=\"0_-i6SHpZL8cxTO5_Q\"></p>\n<h2>On to Code!</h2>\n<p>Up to now, we haven't written any code but are already halfway there!</p>\n<p>Here's what we are going to need to run our Alexa app:</p>\n<ol>\n<li>A Python script</li>\n<li>Ngrok - a local tunnel for quick testing</li>\n</ol>\n<p>That's it!</p>\n<p>Let's get started then!</p>\n<p>First off, go ahead and create a folder on your local machine to store your code. I called mine <code>alexa-drone-strike</code> in a folder on the Desktop.</p>\n<p>Next head on over to <a href=\"https://ngrok.com\">https://ngrok.com</a> to download ngrok. When you download it, it'll be a Unix Executable file - copy and paste (or move) it to the directory you just created for this project. Your folder should look something like this.</p>\n<p><img src=\"../../../static/content/images/2018/06/0_DwGp1JqXVj0N-xQw.png\" alt=\"0_DwGp1JqXVj0N-xQw\"></p>\n<p>I'm a personal fan of <code>virtualenv</code> to manage my python environments. I do not want to have to mess with system level python whenever I do a <code>pip install</code>. If you are unfamiliar with <code>virtualenv</code> think of it like a quick environment where you can change and install python packages without affecting your computer's setup. Here is a quick resource tutorial on how to get it going that I would highly recommend: <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\">http://docs.python-guide.org/en/latest/dev/virtualenvs/</a></p>\n<p>Let's go ahead and open up our terminal and migrate to our directory. For me, that would be <code>cd ~/Desktop/alexa-drone-strike</code></p>\n<p>To install <code>virtualenv</code>, run <code>pip install virtualenv</code>.</p>\n<p>*Note, you may get a \"permission denied\" error. Since we are going to be using <code>virtualenv</code> in other projects and on our computer, we are going to have to run it as <code>sudo</code>. If you get a permission denied, you can run <code>sudo pip install virtualenv</code> or, as a fun trick, if you do <code>sudo !!</code> it will run the last command as <code>sudo</code>.</p>\n<p>Now that we have <code>virtualenv</code> installed, let's create an environment with the command <code>virtualenv venv</code> - it should look something like this:</p>\n<p><img src=\"../../../static/content/images/2018/06/0_3a6V2ipw4QNaqOzc.png\" alt=\"0_3a6V2ipw4QNaqOzc\"></p>\n<p>Now, to activate this environment, run <code>source venv/bin/activate</code>. You will now be in the virtual environment called <code>venv</code>.</p>\n<p>*Note, to get out of the virtual environment, just type in <code>deactivate</code> in your terminal.</p>\n<p>At this point we can go ahead and install our main package for this tutorial <code>flask-ask</code>. In your terminal, run <code>pip install flask-ask</code>. Hopefully it succeeded and it installed a bunch of dependencies along the way.</p>\n<p><img src=\"../../../static/content/images/2018/06/0_Mywf2Hi1Qx0F0rfQ.png\" alt=\"0_Mywf2Hi1Qx0F0rfQ\"></p>\n<p>With <code>flask-ask</code> installed, we can finally create our python file!</p>\n<p>Open up this folder in your favorite code editor (mine is Atom), and you will need to create a new file — I called mine <code>drone_strike.py</code></p>\n<p>At the very top of the file, we are going to start out with the basics that we need — imports.</p>\n<pre><code>from flask import Flask  \nfrom flask_ask import Ask, request, session, question, statement\n</code></pre>\n<p>Next up, let’s get the server setup done with:</p>\n<pre><code>app = Flask(__name__)  \nask = Ask(app, \"/\")\n</code></pre>\n<p>And lastly for this setup, we need to bind it to a port:</p>\n<pre><code>if __name__ == '__main__':  \n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n<p>So right now, our <code>drone_strike.py</code> should look something like this:</p>\n<pre><code>from flask import Flask  \nfrom flask_ask import Ask, request, session, question, statement\napp = Flask(__name__)  \nask = Ask(app, \"/\")\nif __name__ == '__main__':  \n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(5000)\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n<p>Woo! We are almost at the point where we can talk to Alexa to test.</p>\n<p>To get a quick function going, we are going to add a launch command - the command that runs whenever you say <code>Alexa open (name of your app)</code></p>\n<p>Right below where we initialized ask with <code>ask = Ask(app, \"/\")</code> add in this code:</p>\n<pre><code>@ask.launch\ndef launch():  \n    speech_text = \"Hello, welcome to Drone Strike\"\n    return question(speech_text).reprompt(speech_text).simple_card('Welcome', speech_text)\n</code></pre>\n<p>Let’s diagnose what we just put in. First off <code>@ask.launch</code> is the intent that runs whenever we launch the app. It then calls the function <code>launch()</code>. Inside <code>launch()</code> we are defining what we want the app to say and then we return a <code>question</code> and a <code>simple_card</code>.</p>\n<p>The <code>question</code> allows it so that once Alexa finishes saying the <code>speech_text</code>it listens for more information. This is different from a <code>statement</code> where once Alexa finishes saying her bit, she closes the app.</p>\n<p>The <code>simple_card</code> is what shows up inside the official Alexa app on your phone!</p>\n<p>Okay, now that we have our first function in there, let’s get it up and running to test it all out. To start our application, in the terminal run <code>python drone_strike.py</code> and it should start it up like below.</p>\n<p><img src=\"../../../static/content/images/2018/06/0_-2t8M1zOkcwcYnSl.png\" alt=\"0_-2t8M1zOkcwcYnSl\"></p>\n<p>Open another terminal, move into your directory and type in <code>./ngrok http 5000</code>. This will open up a local tunnel session and you are going to need the http url that it assigns you. It should look something like this:</p>\n<p><img src=\"../../../static/content/images/2018/06/0__07mA9p29mg36FQt--1-.png\" alt=\"0__07mA9p29mg36FQt--1-\"></p>\n<p>Head back on over to the Amazon Developer website, click on “Configuration” on the left hand side. Under “Endpoint”, choose “HTTPS” for the “Server Endpoint Type”, check “North America” and then past in the ngrok url. It should look something like the image below:</p>\n<p><img src=\"../../../static/content/images/2018/06/0_-OwqMQVZQHZUPmJv.png\" alt=\"0_-OwqMQVZQHZUPmJv\"></p>\n<p>Go ahead and click “Save” in the bottom left, and then “Next”. For SSL Certificate, for now, choose the middle one like shown below:</p>\n<p><img src=\"../../../static/content/images/2018/06/0_SbCRmQJRsNFgXzd3.png\" alt=\"0_SbCRmQJRsNFgXzd3\"></p>\n<p>Click next and you should now be on the “Test” screen. Woo! We can now test our app!</p>\n<p>So to test our app you are going to need your Amazon Alexa device up and running. The device needs to be connected to the same Amazon account as you are developing on. If you need to change the account for it, open up the Alexa app on your phone and go through the process there (or search online).</p>\n<p>Quick check before we say something:</p>\n<ol>\n<li>The python server is running in one terminal with python drone_strike.py</li>\n<li>Ngrok is running in another terminal</li>\n<li>You copied the ngrok url over to the Alexa Developer dashboard</li>\n<li>You Alexa device and app are hooked up to the same account as your developer account</li>\n</ol>\n<p>If that is all good and done, go ahead and say: <strong>Alexa, open Drone Strike</strong></p>\n<p>Hopefully Alexa responds with “Hello, welcome to Drone Strike”! Progress!</p>\n<p>If all the steps above have been done and you’re still not getting a response, open up the Alexa app on your phone, open the hamburger navigation, go to skills, and then in the top right go to “My Skills.” Make sure Drone Strike is there and enabled. If it isn’t there then the account on your phone/alexa device is not the same as the developer account and you’ll need to fix that.</p>\n<p>If it did work, then congratulations! You’ve got your first Alexa app (technically) running!</p>\n<h2>App Functionality</h2>\n<p>Alright so right now our Alexa app can’t do much at all. We basically just coded the “Hello World” for Alexa, let’s do better than that.</p>\n<p>Remember above when I had you copy and paste the intents and utterances in? Well let’s go back to those and discuss them a little more.</p>\n<h3>Intents &#x26; Meanings</h3>\n<p><strong>GetRecentDroneStrike</strong> — the goal of this intent is to go through the data and just find the last element in the array — aka the most recent drone strike</p>\n<p>As you can see, our intents are pretty simple and also leaves some great room for improvement if you were to take this further. Think about some of these intents — the “this year” intents are only for the current year, there is no “for 2016” or “for 2010.” Same for month. Also, what if you wanted to know more about a drone strike? If you look back at the data above, there’s more to it than just numbers and counts. But, I’ll leave that up for you to develop after this tutorial!</p>\n<h3>Utterances</h3>\n<p>We also have our utterances above. These are example phrases that trigger each intent. So for example, the phrase “what was the most recent strike” triggers GetRecentDroneStrike intent. But you also need to include variants of the phrase - the more you include, the better Alexa can get at responding to you.</p>\n<p>Let’s get back to coding.</p>\n<h2>Coding our App</h2>\n<p>Okay, nitty gritty coding. Here we go.</p>\n<p>First off, we need a couple mor python package — <code>requests</code> - to send a GET request to the Drontstream API. Go ahead and install it in your terminal with <code>pip install requests</code></p>\n<p>After it’s done installing, add it to the top of <code>drone_strike.py</code> with <code>import requests</code>. We are also going to need some dateutil packages, so after <code>import requests</code> add <code>import dateutil.parser</code> and <code>from datetime import date</code></p>\n<p>Below all the import statements, let’s also create a variable for our API url:\n<code>url = 'http://api.dronestre.am/data'</code></p>\n<p>Let’s knock out our first intent <code>GetRecentDroneStrike</code></p>\n<p>The beginning of our function should look like this:</p>\n<pre><code>@ask.intent('GetRecentDroneStrike')\ndef get_recent_drone_strike():  \n    response = requests.get(url).json()\n</code></pre>\n<p>The response is the data coming back from the API. Let’s parse that data and get the strikes out of it.</p>\n<pre><code>strikes = response[\"strike\"]  \nstrikes_count = len(strikes)  \nlast_strike = strikes[strikes_count-1]\n</code></pre>\n<p>The <code>last_strike</code> variable is the last element in the array, aka the most recently add strike. For this intent, we want to output the <strong>date, location, and narrative</strong></p>\n<p>Let’s grab those fields from the data with</p>\n<pre><code>// l_s stands for last_strike\nl_s_narrative = last_strike[\"narrative\"]  \nl_s_date = dateutil.parser.parse(last_strike[\"date\"])  \nl_s_location = last_strike[\"location\"] + \" in \" + last_strike[\"country\"]\n</code></pre>\n<p>Next, let’s display the date in a more voice friendly way.</p>\n<pre><code>l_s_date_text = l_s_date.strftime(\"%A\") + \" \" + l_s_date.strftime(\"%B\") + \" \" + l_s_date.strftime(\"%d\") + \", \" + l_s_date.strftime(\"%Y\")\n</code></pre>\n<p>Lastly, we need to output all of this using flask-ask helper functions:</p>\n<pre><code>last_strike_output = \"The last drone strike was on \" + l_s_date_text + \" in \" + l_s_location + \". \" + l_s_narrative  \nreturn statement(last_strike_output).simple_card('GetRecentDroneStrike', last_strike_output)\n</code></pre>\n<p>So what is this going to sound like?</p>\n<p>The* last drone strike was on Tuesday September 13, 2016 in Al Bayda Province in Yemen. Missiles struck a car in Rada’a, killing 5 people.*</p>\n<p>Alright, so at this point your file should look like this:</p>\n<pre><code>from flask import Flask  \nfrom flask_ask import Ask, request, session, question, statement\nimport requests  \nimport dateutil.parser  \nfrom datetime import date\napp = Flask(__name__)  \nask = Ask(app, \"/\")\nurl = 'http://api.dronestre.am/data'\n@ask.launch\ndef launch():  \n    speech_text = \"Hello, welcome to Drone Strike\"\n    return statement(speech_text).simple_card('Welcome', speech_text)\n@ask.intent('GetRecentDroneStrike')\ndef get_recent_drone_strike():  \n    response = requests.get(url).json()\n    strikes = response[\"strike\"]\n    strikes_count = len(strikes)\n    last_strike = strikes[strikes_count-1]\n    l_s_narrative = last_strike[\"narrative\"]\n    l_s_date = dateutil.parser.parse(last_strike[\"date\"])\n    l_s_location = last_strike[\"location\"] + \" in \" + last_strike[\"country\"]\n    l_s_date_text = l_s_date.strftime(\"%A\") + \" \" + l_s_date.strftime(\"%B\") + \" \" + l_s_date.strftime(\"%d\") + \", \" + l_s_date.strftime(\"%Y\")\n    last_strike_output = \"The last drone strike was on \" + l_s_date_text + \" in \" + l_s_location + \". \" + l_s_narrative\n    return statement(last_strike_output).simple_card('GetRecentDroneStrike', last_strike_output)\nif __name__ == '__main__':  \n    # Bind to PORT if defined, otherwise default to 5000.\n    port = 5000\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n<p>And hopefully that’s all we need!</p>\n<p>Head on over to your terminal <strong>that is running python drone_strike.py</strong>, cancel the process with CMD-C, and then run it again with <code>python drone_strike.py</code>. *Note, if you accidentally close the ngrok process, you'll have to run it again, copy the url, and paste it in the configuration.</p>\n<p>If the process is up and running, go ahead and ask Alexa! Hopefully she will respond with the correct text!</p>\n<p>Congratulations, you’ve made your first Alexa app!</p>\n<hr>\n<h2>Recap &#x26; Final Thoughts</h2>\n<p>Congratulations! Like I said above, there are many many more ways you can use this data. Today was all about getting your first introduction into Alexa apps and building them. If you wanted to deploy this app, Heroku would be a great service or you can follow this tutorial using Zappa and Amazon AWS: <a href=\"https://www.youtube.com/watch?v=mjWV4R2P4ks\">https://www.youtube.com/watch?v=mjWV4R2P4ks</a></p>\n<p>Here are some more resources:</p>\n<ul>\n<li>Flask-Ask: <a href=\"https://github.com/johnwheeler/flask-ask\">https://github.com/johnwheeler/flask-ask</a></li>\n<li>AWS in Plain English: <a href=\"https://www.expeditedssl.com/aws-in-plain-english\">https://www.expeditedssl.com/aws-in-plain-english</a></li>\n<li>Getting started with Skills Kit:<a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/getting-started-guide\">https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/getting-started-guide</a></li>\n<li>Build your first Alexa Skill: <a href=\"https://medium.com/@bthdonohue/build-your-first-alexa-skill-8a37dc3103d6#.9ys55u201\">https://medium.com/@bthdonohue/build-your-first-alexa-skill-8a37dc3103d6#.9ys55u201</a></li>\n</ul>\n<p>Let me know if you have any questions or problems below. Also be sure to checkout the Github repo for the final product: <a href=\"https://github.com/kevinguebert/alexa-drone-strike\">https://github.com/kevinguebert/alexa-drone-strike</a></p>","frontmatter":{"title":"Build Your First Alexa App","date":"April 04, 2017","path":"/2017/04/04/build-your-first-alexa-app","tags":["Tutorials","Technology","Coding"],"excerpt":"In today's tutorial we are going to set up a very basic Amazon Alexa Skill that uses Python, specifically a package called Flask-Ask. Today's sample data may seem a bit controversial and..."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}