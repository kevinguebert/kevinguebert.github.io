<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Guebert</title>
    <description>Write a description of your website here.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 02 Apr 2018 06:50:30 -0600</pubDate>
    <lastBuildDate>Mon, 02 Apr 2018 06:50:30 -0600</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>End of March Reflection</title>
        <description>&lt;p&gt;March has come and gone, time to reflect on any progress of my goals!&lt;/p&gt;

&lt;h4 id=&quot;goal-by-memorial-day-2018-i-want-to-have-100-new-posts-on-a-website-about-something-i-have-learned&quot;&gt;Goal: By Memorial Day 2018, I want to have 100 new posts on a website about something I have learned.&lt;/h4&gt;

&lt;p&gt;If you want to learn more about this goal, check out &lt;a href=&quot;/blog/2018/01/31/z-month-1-recap.html&quot;&gt;End of January Reflection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Metrics&lt;/strong&gt;: In January, I completed exactly 20 blog posts. To meet my goal of 100 new posts by Memorial Day, I would have to average 20 posts a month(ish). In February, I completed 13 blog posts which put me 7 behind the pace.&lt;/p&gt;

&lt;p&gt;In March, after having a bit of a lapse in the middle of the month and also including this post, I had &lt;strong&gt;32 blog posts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding the Data&lt;/strong&gt;: To be honest, a bit of a surprise for me! Here are a couple notes about having 32 blog posts in March:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I successfully made up my 7 post deficit from February&lt;/li&gt;
  &lt;li&gt;I am now 5 posts ahead of my planned schedule of 20 posts a month&lt;/li&gt;
  &lt;li&gt;Brings my total blog posts to 65 - 35 to go before Memorial Day!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Going Forward&lt;/strong&gt;: I’m not going to lie, the book I’m reading right now &lt;em&gt;Design It!&lt;/em&gt; is not too exciting to blog about. It’s very software/programming focused. However, I do have other books on the way that will provide (in my mind), better material. I do feel like I’ve been in more of a “groove” with posting though, so I would like to continue that in the month of April.&lt;/p&gt;

&lt;p&gt;Along with the design update in March, I’ve also added commenting to certain posts that I feel are suitable for comments. My &lt;a href=&quot;/blog/2018/01/09/look-then-leap&quot;&gt;Look then Leap&lt;/a&gt; post has received a fair amount of traffic so I recently added commenting there and have also received a comment! Not all posts will have comments though, it is based off of if I feel it would provide benefit. Feel free to provide any feedback or let me know what you think below!&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/31/march-review</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/31/march-review</guid>
        
        <category>reflection</category>
        
        <category>personal-growth</category>
        
        <category>recap</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Design with Empathy</title>
        <description>&lt;h6 id=&quot;post-inspired-from-design-it-from-programmer-to-software-architect-by-michael-keeling&quot;&gt;Post inspired from: &lt;strong&gt;Design It! From Programmer to Software Architect&lt;/strong&gt; by Michael Keeling&lt;/h6&gt;

&lt;p&gt;Have you ever used an app or a website or a product and think to yourself “this is terrible, did they even talk to the users beforehand?” That is an example of a team developing far away from their users with an idea of what &lt;em&gt;they think&lt;/em&gt; users would want. Instead, in designing software and products, one needs to have &lt;strong&gt;empathy&lt;/strong&gt; with the stakeholders. The stakeholds include everyone who is going to touch the application - owners, employees, users, IT, support, etc. When you spend time up front talking with the stakeholds and figuring out what &lt;em&gt;they want&lt;/em&gt; and what their &lt;em&gt;goal&lt;/em&gt; is, then you can design and architect with more data to create the best architecture possible. It does sound a little like User Experience (UX), but it takes the information into an engineering and architecture perspective that UX Designers are not as focused on.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/30/design-with-empathy</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/30/design-with-empathy</guid>
        
        <category>books</category>
        
        <category>coding</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Fundamentals of Design Thinking</title>
        <description>&lt;h6 id=&quot;post-inspired-from-design-it-from-programmer-to-software-architect-by-michael-keeling&quot;&gt;Post inspired from: &lt;strong&gt;Design It! From Programmer to Software Architect&lt;/strong&gt; by Michael Keeling&lt;/h6&gt;

&lt;h3 id=&quot;human-rule&quot;&gt;Human Rule&lt;/h3&gt;
&lt;p&gt;We design for people &amp;amp; with people. When designing, we must think about the stakeholds, the end users, the programmers, the testers, and the managers. Architects do not operate in a silo with no input or feedback, they work in a team.&lt;/p&gt;

&lt;h3 id=&quot;ambiguity-rule&quot;&gt;Ambiguity Rule&lt;/h3&gt;
&lt;p&gt;Design the architecture for the high-priorty quality attributes and then leave all other design decisions for downstream designers and later thought. If the decisions do not directly influence the quality attributes or reduce risk, they are more designs than architecture.&lt;/p&gt;

&lt;h3 id=&quot;redesign-rule&quot;&gt;Redesign Rule&lt;/h3&gt;
&lt;p&gt;Look at what has already been built and explore these patterns and past designs. What can we learn from them? How can we improve them?&lt;/p&gt;

&lt;h3 id=&quot;tangible-rule&quot;&gt;Tangible Rule&lt;/h3&gt;
&lt;p&gt;If we want to share our design and architecture, we need to make it tangible through drawings, prototpes, models, and other tangible representations. This then helps the Human Rule in helping humans understand the architecture.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/29/design-thinking-fundamentals</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/29/design-thinking-fundamentals</guid>
        
        <category>books</category>
        
        <category>coding</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Life in Terms of Priorities and Trades</title>
        <description>&lt;p&gt;Recently for me, I’ve seen a post shared around on social media sites that prescribes a different way of thinking about your tasks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead of saying “I don’t have time” try saying “it’s not a priority” and see how it feels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last night I was hit with this decision: stay and play Settler’s of Catan with my friends, new people, and be social, or, head home and wake up in time for a 6:30AM track workout. This, for me, was an exercise of that quote. What was the highest priority for me? My original plan was to do both, but when the game turned into “want to play another?” the decision was needed fast. Stay or leave? The problem is that a) being social and b) working out are both high priorities for me. So what do I do when they collide?&lt;/p&gt;

&lt;p&gt;In this scenario, I traded. I traded my sleep time and workout time for extra social time and I stay to play Catan. When making decisions, you need to think about how the current decision could effect any future decisions. I had to be okay with giving up the future track workout to stay and play Catan.&lt;/p&gt;

&lt;p&gt;Today, try thinking about what to you is a priority and how you deal with it. Is it actually the highest priority in your life? Do you put it above everything else? Or does it sink low when something with quicker returns comes along?&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/28/tradeoffs-and-priorities</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/28/tradeoffs-and-priorities</guid>
        
        <category>personal-growth</category>
        
        <category>reflection</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A React Meetup Recap</title>
        <description>&lt;p&gt;This past Monday I had the great opportunity to attend a “Intro to React” Meetup. At this Meetup we discussed some of starting blocks to get you going with React - I wanted to share some of the notes I took and recap a bit of what was discussed.&lt;/p&gt;

&lt;h2 id=&quot;single-page-application-spa&quot;&gt;Single Page Application (SPA)&lt;/h2&gt;

&lt;p&gt;What is a Single Page Application? A SPA is an application where all the coded needed is loaded in a single page load. The page does not reload, instead it requires dynamic interaction with the web server.&lt;/p&gt;

&lt;h2 id=&quot;key-concepts-in-react&quot;&gt;Key Concepts in React&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Web Components&lt;/li&gt;
  &lt;li&gt;1 Way Data Binding&lt;/li&gt;
  &lt;li&gt;Virtual DOM&lt;/li&gt;
  &lt;li&gt;JSX&lt;/li&gt;
  &lt;li&gt;State Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-components&quot;&gt;What are Components?&lt;/h2&gt;

&lt;p&gt;Components let you split the UI into multiple “chunks” of the web page. If you look at my site right now, you can imagine a “header” component that has my name, a “navigation” component within the “header” component, an “article” component, and much much more.&lt;/p&gt;

&lt;h2 id=&quot;one-way-data-binding&quot;&gt;One Way Data Binding&lt;/h2&gt;

&lt;p&gt;This was my first intro into one-way vs. two-way data binding. From my understanding, and from a phrase shared by another developer, data can only flow one way (as it says). So if you imagine a tree structure with you multiple components, the data has to come from the top root element and then flow down to the components. “Action Up, Data Down”.&lt;/p&gt;

&lt;h2 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h2&gt;

&lt;p&gt;The Virtual DOM is a shadow copy of the actual DOM (Document Object Model) that allows React to quickly compare the Virtual DOM to the actual DOM and then quickly change out specific elements without having to reload the whole DOM.&lt;/p&gt;

&lt;h2 id=&quot;jsx&quot;&gt;JSX&lt;/h2&gt;

&lt;p&gt;JSX is an HTML-like syntax that allows you to pass data as &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; (properties) to help dender dynamic values.&lt;/p&gt;

&lt;h4 id=&quot;what-are-props&quot;&gt;What are &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; is data coming from the parent component. Note - &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; are &lt;em&gt;read only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Example of JSX syntax:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render() {
	return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;state-management---state-vs-setstate&quot;&gt;State Management - State vs. setState&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;: use state to assign data &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt;: want to change or update the data in state&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Always have to initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; in the constructor&lt;/li&gt;
  &lt;li&gt;Lift the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; up to the closest common ancestor
    &lt;ul&gt;
      &lt;li&gt;single “source of truth”&lt;/li&gt;
      &lt;li&gt;Top down data flow, so you want the state at the “parent”&lt;/li&gt;
      &lt;li&gt;Avoid duplication of state in child components&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;That is a real basic rundown of what we worked on! If you want to view the code we also looked at, check out &lt;a href=&quot;https://github.com/gschool/learn-to-code-react&quot;&gt;https://github.com/gschool/learn-to-code-react&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/28/react-meetup-recap</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/28/react-meetup-recap</guid>
        
        <category>coding</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Responsibilities of a Software Architect</title>
        <description>&lt;h6 id=&quot;post-inspired-from-design-it-from-programmer-to-software-architect-by-michael-keeling&quot;&gt;Post inspired from: &lt;strong&gt;Design It! From Programmer to Software Architect&lt;/strong&gt; by Michael Keeling&lt;/h6&gt;

&lt;p&gt;While reading this new book, my posts may become more programming based. I will try and throw in some other more personal-growth posts in along with it, but today’s posts is from the verrrryyy first chapter of &lt;em&gt;Design It!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When talking about a software architect (SA), Keeling points out 5 specific responsibilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Define the problem from an engineering perspective&lt;/li&gt;
  &lt;li&gt;Partition the system and assign responsibilities&lt;/li&gt;
  &lt;li&gt;Keep an eye on the bigger picture&lt;/li&gt;
  &lt;li&gt;Decide trade-offs amont quality attributes&lt;/li&gt;
  &lt;li&gt;Manage technical debt&lt;/li&gt;
  &lt;li&gt;Grow the team’s architecture skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the first things I’ve noticed so far is that it has said nothing about programming. Does a software architect program? I’m not quite sure. From previous experiences, it seems like they know and understand coding, but maybe not syntax of specific languages or nuances? There’s more to learn!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/27/software-architect</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/27/software-architect</guid>
        
        <category>books</category>
        
        <category>coding</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>45 Minutes Every Morning</title>
        <description>&lt;h6 id=&quot;post-inspired-from-the-100-startup-by-chris-guillebeau&quot;&gt;Post inspired from: &lt;strong&gt;The $100 Startup&lt;/strong&gt; by Chris Guillebeau&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;Every morning, set aside forty-tive minutes without internet access. Devote this time exclusively to activities that improve your business -not hing that merely maintains the business. Think forward motion…What can you do to keep things moving ahead?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the beginning of the writing journey, back in January, I shared a post &lt;a href=&quot;/blog/2018/01/12/morning-routine&quot;&gt;describing my morning routing&lt;/a&gt;. The quote above by Chris Guillebeau is not limited to a “startup” or a “business” in the way that he refers them. We share the same basic principle - every morning, spend some time sans-internet to focus on &lt;em&gt;something&lt;/em&gt;. For me, my “startup” is myself. Every morning I focus on activites that will improve me - reading, journaling, and then writing. In Chris Guillebeau’s world, that “startup” is actually a business but the same principles apply! If you’ve been on the fence about it, try it for one week. For one week, don’t check your phone automatically when you wake up. Get some coffee, have a good breakfast, read a little, make a to-do list, or just sit and think. Keep the interruptions of the world at bay and make that time for you.&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/26/time-for-your-business</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/26/time-for-your-business</guid>
        
        <category>books</category>
        
        <category>startups</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Coding Mnemonically</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Mnemonic: a device such as a pattern of letters, ideas, or associations that assists in remembering something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While following my &lt;a href=&quot;/2018/03/py4e&quot;&gt;Python for Everybody&lt;/a&gt; course, I learned about &lt;em&gt;mnemonic variable names&lt;/em&gt;, what that means, and how it can enhance programming. If you have been programming for a while now, you were probably taught this at one point in your history. For me, it was instilled in me in my first co-op job. Mnemonic variable naming is simple creating variable names that are indicative of the data they are holding. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 40&lt;/code&gt; is pretty basic, but if you change it to &lt;code class=&quot;highlighter-rouge&quot;&gt;hours_per_week = 40&lt;/code&gt;, you can clearly understand that the value 4 relates to how many hours one may work in a week. If you are a new programmer and starting off, I would recommend trying to use mnemonic variable names as much as possible. It will help with debugging, sharing code, and help deliver better quality code in the end!&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/25/coding-mnemonics</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/25/coding-mnemonics</guid>
        
        <category>coding</category>
        
        <category>py4e</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Derek Sivers' &quot;Hell Yeah&quot; Test</title>
        <description>&lt;h6 id=&quot;post-inspired-from-the-100-startup-by-chris-guillebeau&quot;&gt;Post inspired from: &lt;strong&gt;The $100 Startup&lt;/strong&gt; by Chris Guillebeau&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;“If you’re not saying “HELL YEAH!” about something, say “no”.” -Derek Sivers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wish I could heed my own advice! OFten times, we as humans have too many things on our plates. Projects, events, and activities crowd up our schedule until we become burned out and tired. The “hell yeah” rule is a great way to look at decisions in your life - if you aren’t stoked about it, politely decline. I would like to think I’ve become better at recognizing this, but I think others would disagree. From Sivers’ &lt;a href=&quot;https://sivers.org/hellyeah&quot;&gt;Hell Yeah Website&lt;/a&gt;, he states a solid reason for why you should be saying no more often: “When you say no to most things, you leave room in your life to really throw yourself completely into that rare thing that makes you say “HELL YEAH!” When you say no, you then have more time to focus on the projects/events/activities you actually want to focus on.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/24/hell-yeah-rule</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/24/hell-yeah-rule</guid>
        
        <category>books</category>
        
        <category>startups</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A New Coding Course</title>
        <description>&lt;p&gt;A big lesson I have been working on learning over the past couple years is, when a problem occurs, take action as soon as possible. This action can be creating a plan, writing down your goals, watching YouTube videos, or creating a Google Doc with action items, but at the very least you are moving towards fixing the problem. Two days ago, I shared a post &lt;a href=&quot;/blog/2018/03/21/things-i-wish-i-knew.html&quot;&gt;Things I Wish I Knew&lt;/a&gt; that outlined some of the struggles I have been facing in terms of my development skills. The following day (yesterday), I provided an update titled &lt;a href=&quot;/blog/2018/03/22/coding-course-updates.html&quot;&gt;Things I Wish I Knew - Progress&lt;/a&gt; where I outlined some of my possible courses of action. From this action item list, I looked into and completed all of them!&lt;/p&gt;

&lt;p&gt;✔️ Talk to a coworker/friend about ways to improve&lt;br /&gt;
✔️ Research online classes and figure out the best one.&lt;/p&gt;

&lt;p&gt;In doing all of this, I’ve come to two new courses of action:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Look into books from the library that I can read to improve knowledge
  ✔️ &lt;em&gt;Design it! : from programmer to software architect&lt;/em&gt; is currently on hold at the library&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start an online class &lt;br /&gt;
  ✔️ Yesterday I started &lt;a href=&quot;https://www.py4e.com/&quot;&gt;Python for Everybody&lt;/a&gt; and completed the first chapter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this new course, you will notice a new tag &lt;a href=&quot;/tag/py4e.html&quot;&gt;py4e&lt;/a&gt;(Python 4 Everybody - PY4E) where you can track any posts or updates I may have.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2018/03/23/py4e</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/03/23/py4e</guid>
        
        <category>coding</category>
        
        <category>personal-growth</category>
        
        <category>py4e</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
